#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(dirname "$(realpath "$0")")
cd "$SCRIPT_DIR"

# Variable set
username="piyush"
uuid=$(blkid -s UUID -o value -t TYPE=crypto_LUKS | head -n1)
[ -n "$uuid" ] || {
  echo "no LUKS UUID found" >&2
  exit 1
}

# Which type of install?
# First choice: vm or hardware
echo "Choose one:"
select hardware in "vm" "hardware"; do
  [[ -n $hardware ]] && break
  echo "Invalid choice. Please select 1 for vm or 2 for hardware."
done

# extra choice: laptop or bluetooth or none
if [[ "$hardware" == "hardware" ]]; then
  echo "Choose one:"
  select extra in "laptop" "bluetooth" "none"; do
    [[ -n $extra ]] && break
    echo "Invalid choice."
  done
else
  extra="none"
fi

# Which type of packages?
# Main package selection
case "$hardware" in
vm)
  sed -n '1p' pkgs.txt | tr ' ' '\n' | grep -v '^$' >>pkglist.txt
  ;;
hardware)
  sed -n '1p;2p' pkgs.txt | tr ' ' '\n' | grep -v '^$' >>pkglist.txt
  ;;
esac

# For hardware:max, add lines 5 and/or 6 based on $extra
if [[ "$hardware" == "hardware" ]]; then
  case "$extra" in
  laptop)
    sed -n '3p;4p' pkgs.txt | tr ' ' '\n' | grep -v '^$' >>pkglist.txt
    ;;
  bluetooth)
    sed -n '3p' pkgs.txt | tr ' ' '\n' | grep -v '^$' >>pkglist.txt
    ;;
  none) ;;
  esac
fi

# Package installation apt
wget -O- https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/trusted.gpg.d/adoptium.asc
echo "deb https://packages.adoptium.net/artifactory/deb bookworm main" >/etc/apt/sources.list.d/adoptium.list
apt update
xargs -a pkglist.txt apt install -y

# Tlp setup
# Robust detection: prefer explicit pstate driver dirs if present, fallback to scaling_driver text
scaling_f="/sys/devices/system/cpu/cpu0/cpufreq/scaling_driver"
pstate_supported=false
driver=""
if [ -d /sys/devices/system/cpu/intel_pstate ]; then
  driver="intel_pstate"
  pstate_supported=true
elif [ -d /sys/devices/system/cpu/amd_pstate ] || [ -d /sys/devices/system/cpu/amd-pstate ]; then
  # kernel docs and kernels may expose amd_pstate/amd-pstate; accept either
  driver="amd_pstate"
  pstate_supported=true
elif [ -r "$scaling_f" ]; then
  # fallback: read scaling_driver and normalise
  rawdrv=$(cat "$scaling_f" 2>/dev/null || true)
  case "$rawdrv" in
  *intel*)
    driver="intel_pstate"
    pstate_supported=true
    ;;
  *amd*)
    driver="amd_pstate"
    pstate_supported=true
    ;;
  *) driver="$rawdrv" ;;
  esac
fi

# Kernel parameter to encourage pstate driver mode on next boot (set only when pstate is supported)
pstate_param=""
if [ "$pstate_supported" = true ]; then
  if [ "$driver" = "intel_pstate" ]; then
    # prefer 'active' for AC; we'll keep TLP switching to 'passive' on BAT to allow schedutil there.
    pstate_param="intel_pstate=active"
  elif [ "$driver" = "amd_pstate" ]; then
    # amd_pstate supports active/passive/guided depending on kernel; active is a reasonable default.
    pstate_param="amd_pstate=active"
  fi
fi

# Write base TLP config (safe defaults; adjust values below if you want more aggressive perf)
if [[ "$extra" == "laptop" ]]; then
  cat >/etc/tlp.conf <<EOF
# Generated by installer - baseline TLP config
PLATFORM_PROFILE_ON_AC=performance
PLATFORM_PROFILE_ON_BAT=low-power

# PCIe ASPM: prefer default on AC (don't force performance), aggressive on battery
PCIE_ASPM_ON_AC=default
PCIE_ASPM_ON_BAT=powersupersave

USB_AUTOSUSPEND=1
USB_EXCLUDE_BTUSB=0
USB_EXCLUDE_PHONE=1

# Runtime PM (use new name)
RUNTIME_PM_ON_AC=on
RUNTIME_PM_ON_BAT=auto
RUNTIME_PM_DRIVER_DENYLIST="amdgpu nouveau nvidia"

WIFI_PWR_ON_AC=off
WIFI_PWR_ON_BAT=on

SOUND_POWER_SAVE_ON_AC=0
SOUND_POWER_SAVE_ON_BAT=1

DISK_APM_LEVEL_ON_AC="254 254"
DISK_APM_LEVEL_ON_BAT="128 128"

# Per-disk IO scheduler: use mq-deadline as safe default (leave kernel default with 'keep')
DISK_IOSCHED="none mq-deadline kyber bfq"

SATA_LINKPWR_ON_AC=max_performance
SATA_LINKPWR_ON_BAT=min_power

# Charging thresholds (only functional if tlp-rdw and hardware support)
START_CHARGE_THRESH_BAT0=40
STOP_CHARGE_THRESH_BAT0=80
EOF

  # CPU-specific settings by driver
  if [ "$driver" = "intel_pstate" ]; then
    # Use 'active' for AC (intel internal algorithms), use 'passive' on BAT so schedutil can be selected
    cat >>/etc/tlp.conf <<EOF
# Intel pstate tuning
CPU_DRIVER_OPMODE_ON_AC=active
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_ENERGY_PERF_POLICY_ON_AC=performance
CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF

  elif [ "$driver" = "amd_pstate" ]; then
    # For AMD: prefer active when the new energy/CPP features exist, otherwise fall back to using schedutil
    if [ -f /sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference ]; then
      cat >>/etc/tlp.conf <<EOF
# AMD pstate with energy perf preference support
CPU_DRIVER_OPMODE_ON_AC=active
CPU_DRIVER_OPMODE_ON_BAT=active
CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=powersave
CPU_ENERGY_PERF_POLICY_ON_AC=performance
CPU_ENERGY_PERF_POLICY_ON_BAT=power
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
    else
      cat >>/etc/tlp.conf <<EOF
# AMD pstate older kernels - keep schedutil
CPU_DRIVER_OPMODE_ON_AC=passive
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=schedutil
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
    fi

  else
    # Generic fallback: use schedutil both AC/BAT
    cat >>/etc/tlp.conf <<EOF
# Generic CPUfreq fallback
CPU_DRIVER_OPMODE_ON_AC=passive
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=schedutil
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
  fi
fi

# Boot Manager setup
echo "timeout 3" >>/boot/efi/loader/loader.conf
echo "editor no" >>/boot/efi/loader/loader.conf

# Sudo Configuration
echo "%wheel ALL=(ALL) ALL" >/etc/sudoers.d/wheel
echo "Defaults timestamp_timeout=-1" >/etc/sudoers.d/timestamp
echo "Defaults pwfeedback" >/etc/sudoers.d/pwfeedback
echo 'Defaults env_keep += "XDG_RUNTIME_DIR WAYLAND_DISPLAY DBUS_SESSION_BUS_ADDRESS WAYLAND_SOCKET"' >/etc/sudoers.d/wayland
chmod 440 /etc/sudoers.d/*
if [[ "$hardware" == "hardware" ]]; then
  usermod -aG docker,libvirt,kvm,lpadmin piyush
fi
usermod -aG sudo,adm,cdrom,plugdev,video,audio,input,netdev piyush

# Copy config and dotfiles as the user
su - "$username" -c '
  mkdir -p ~/Downloads ~/Desktop ~/Public ~/Templates ~/Videos ~/Pictures/Screenshots/temp ~/.config
  mkdir -p ~/Documents/personal/default ~/Documents/projects/work ~/Documents/projects/sandbox ~/Documents/personal/wiki
  mkdir -p ~/.local/bin ~/.cache/cargo-target ~/.local/state/bash ~/.local/state/zsh ~/.local/share/wineprefixes
  touch ~/.local/state/bash/history ~/.local/state/zsh/history ~/Documents/personal/wiki/index.txt

  git clone https://github.com/zedonix/scripts.git ~/Documents/personal/default/scripts
  git clone https://github.com/zedonix/dotfiles.git ~/Documents/personal/default/dotfiles
  git clone https://github.com/zedonix/debsetup.git ~/Documents/personal/default/debsetup
  git clone https://github.com/zedonix/notes.git ~/Documents/personal/default/notes
  git clone https://github.com/zedonix/GruvboxGtk.git ~/Documents/personal/default/GruvboxGtk
  git clone https://github.com/zedonix/GruvboxQT.git ~/Documents/personal/default/GruvboxQT

  cp ~/Documents/personal/default/dotfiles/.config/sway/archLogo.png ~/Pictures/
  cp ~/Documents/personal/default/dotfiles/pics/* ~/Pictures/
  ln -sf ~/Documents/personal/default/dotfiles/.bashrc ~/.bashrc
  ln -sf ~/Documents/personal/default/dotfiles/.zshrc ~/.zshrc
  ln -sf ~/Documents/personal/default/dotfiles/.XCompose ~/.XCompose

  for link in ~/Documents/personal/default/dotfiles/.config/*; do
    ln -sf "$link" ~/.config/
  done
  for link in ~/Documents/personal/default/dotfiles/.copy/*; do
    cp -r "$link" ~/.config/
  done
  for link in ~/Documents/personal/default/scripts/bin/*; do
    ln -sf "$link" ~/.local/bin/
  done
  git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
  zoxide add /home/piyush/Documents/personal/default/debsetup

  # Iosevka
  cd ~/Downloads/
  mkdir -p ~/.local/share/fonts/iosevka
  cd ~/.local/share/fonts/iosevka
  curl -LO https://github.com/ryanoasis/nerd-fonts/releases/latest/download/IosevkaTerm.zip
  unzip IosevkaTerm.zip
  rm IosevkaTerm.zip

  # Bemoji
  cd ~/Downloads/
  git clone https://github.com/marty-oehme/bemoji
  chmod +x bemoji/bemoji
  ./bemoji/bemoji --download all
  mv bemoji/bemoji ~/.local/bin
  rm -rf bemoji

  go install github.com/savedra1/clipse@v1.1.0
  rustup default stable
  rustup update
  cargo install wayland-pipewire-idle-inhibit
'
corepack enable
corepack prepare pnpm@latest --activate
# Newsraft
cd /root
git clone https://codeberg.org/newsraft/newsraft.git
cd newsraft
make
make install
# ly
curl -LO https://ziglang.org/download/0.15.1/zig-x86_64-linux-0.15.1.tar.xz
tar -xf zig-x86_64-linux-0.15.1.tar.xz
mv zig-x86_64-linux-0.15.1 /opt/zig
ln -sf /opt/zig/zig /usr/local/bin/zig
cd /root
git clone https://codeberg.org/fairyglade/ly.git
cd ly
zig build -Dinit_system=systemd -Denable_x11_support=false --verbose
zig build installexe -Dinit_system=systemd
rm -rf /opt/zig
rm -f /usr/local/bin/zig
# ananicy-cpp
git clone https://gitlab.com/ananicy-cpp/ananicy-cpp.git
cd ananicy-cpp
cmake -S . -B build  -DCMAKE_BUILD_TYPE=Release -DENABLE_SYSTEMD=ON -DUSE_BPF_PROC_IMPL=ON -DWITH_BPF=ON
cmake --build build --target ananicy-cpp
cmake --install build --component Runtime

# Root .config
mkdir -p ~/.config ~/.local/state/bash ~/.local/state/zsh
echo '[[ -f ~/.bashrc ]] && . ~/.bashrc' >~/.bash_profile
touch ~/.local/state/zsh/history ~/.local/state/bash/history
ln -sf /home/$username/Documents/personal/default/dotfiles/.bashrc ~/.bashrc
ln -sf /home/$username/Documents/personal/default/dotfiles/.zshrc ~/.zshrc
ln -sf /home/$username/Documents/personal/default/dotfiles/.config/starship.toml ~/.config
ln -sf /home/$username/Documents/personal/default/dotfiles/.config/nvim/ ~/.config

# ly config
# -e 's/^bigclock *= *.*/bigclock = en/' \
sed -i \
  -e 's/^allow_empty_password *= *.*/allow_empty_password = false/' \
  -e 's/^clear_password *= *.*/clear_password = true/' \
  -e 's/^clock *= *.*/clock = %a %d\/%m %H:%M/' \
  /etc/ly/config.ini

# Setup Gruvbox theme
THEME_SRC="/home/$username/Documents/personal/default/GruvboxQT"
THEME_DEST="/usr/share/Kvantum/Gruvbox"
mkdir -p "$THEME_DEST"
cp "$THEME_SRC/gruvbox-kvantum.kvconfig" "$THEME_DEST/Gruvbox.kvconfig"
cp "$THEME_SRC/gruvbox-kvantum.svg" "$THEME_DEST/Gruvbox.svg"

THEME_SRC="/home/$username/Documents/personal/default/GruvboxGtk"
THEME_DEST="/usr/share"
cp -r "$THEME_SRC/themes/Gruvbox-Material-Dark" "$THEME_DEST/themes"
cp -r "$THEME_SRC/icons/Gruvbox-Material-Dark" "$THEME_DEST/icons"

# Anancy-cpp rules
git clone --depth=1 https://github.com/RogueScholar/ananicy.git
git clone --depth=1 https://github.com/CachyOS/ananicy-rules.git
mkdir -p /etc/ananicy.d/roguescholar /etc/ananicy.d/zz-cachyos
cp -r ananicy/ananicy.d/* /etc/ananicy.d/roguescholar/
cp -r ananicy-rules/00-default/* /etc/ananicy.d/zz-cachyos/
cp -r ananicy-rules/00-types.types /etc/ananicy.d/zz-cachyos/
cp -r ananicy-rules/00-cgroups.cgroups /etc/ananicy.d/zz-cachyos/
tee /etc/ananicy.d/ananicy.conf >/dev/null <<'EOF'
check_freq = 15
cgroup_load = false
type_load = true
rule_load = true
apply_nice = true
apply_latnice = true
apply_ionice = true
apply_sched = true
apply_oom_score_adj = true
apply_cgroup = true
loglevel = info
log_applied_rule = false
cgroup_realtime_workaround = false
EOF

# Firefox policy
mkdir -p /etc/firefox/policies
ln -sf "/home/$username/Documents/personal/default/dotfiles/policies.json" /etc/firefox/policies/policies.json

# zram config
# Get total memory in MiB
TOTAL_MEM=$(awk '/MemTotal/ {print int($2 / 1024)}' /proc/meminfo)
ZRAM_SIZE=$((TOTAL_MEM / 2))

# Create zram config
mkdir -p /etc/systemd/zram-generator.conf.d
{
  echo "[zram0]"
  echo "zram-size = ${ZRAM_SIZE}"
  echo "compression-algorithm = zstd"
  echo "swap-priority = 100"
  echo "fs-type = swap"
} >/etc/systemd/zram-generator.conf.d/00-zram.conf

# Services
# rfkill unblock bluetooth
# modprobe btusb || true
if [[ "$hardware" == "hardware" ]]; then
  systemctl enable fstrim.timer acpid libvirtd.socket cups ipp-usb docker.socket
fi
if [[ "$extra" == "laptop" || "$extra" == "bluetooth" ]]; then
  systemctl enable bluetooth
fi
if [[ "$extra" == "laptop" ]]; then
  systemctl enable tlp
fi
systemctl enable ly nohang-desktop.service ananicy-cpp
systemctl enable NetworkManager NetworkManager-dispatcher
systemctl mask systemd-rfkill systemd-rfkill.socket
systemctl disable NetworkManager-wait-online.service getty@tty2.service

# Apparmor
# for profile in firefox flatpak loupe signal-desktop steam; do
#   sudo apparmor_parser -r /etc/apparmor.d/$profile
#   sudo aa-enforce $profile
# done

# Cleaning post setup
apt remove --purge -y libspdlog-dev nlohmann-json3-dev libfmt-dev libpipewire-0.3-dev libxcb-xkb-dev libc6-dev libpam0g-dev build-essential cmake g++ libsystemd-dev libsqlite3-dev libexpat1-dev libgumbo-dev libcurl4-openssl-dev pkg-config libbpf-dev libelf-dev clang bpftool dwarves zlib1g-dev
apt autoremove --purge -y
apt clean
